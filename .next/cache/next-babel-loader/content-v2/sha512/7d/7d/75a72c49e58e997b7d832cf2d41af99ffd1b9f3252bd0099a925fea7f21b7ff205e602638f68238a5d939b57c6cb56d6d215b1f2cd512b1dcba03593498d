{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/programing_practice/suberobeta_app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/programing_practice/suberobeta_app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\programing_practice\\\\suberobeta_app\\\\components\\\\MessageAdd.js\",\n    _s = $RefreshSig$();\n\n//メッセージ送信フォーム\n//message/[lessonid]でインポート\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"firebase\";\nimport { useRouter } from \"next/router\";\nimport Lib from \"../static/address_lib\";\n\nfunction MessageAdd(props) {\n  _s();\n\n  //使用するステートの設定(Hook)\n  var _useState = useState(\"\"),\n      message = _useState[0],\n      setMessage = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      userfilter = _useState2[0],\n      setUserfilter = _useState2[1]; //inputに入力された処理をeで受け取ってステートに入れる関数\n\n\n  var doChangeMessage = function doChangeMessage(e) {\n    setMessage(e.target.value);\n  };\n\n  var router = useRouter(); //追加ボタンを押したらfirebaseにステートの情報を書き込む処理\n  //addで追加しているから、ドキュメントidはユニークなidが自動で当てられる\n  //Reduxからユーザーのemail(id)をencode( .→* )にして定数に代入\n\n  var doSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var db, email, d, userfilter;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              db = firebase.firestore();\n              email = Lib.encodeEmail(props.email);\n              d = new Date().getTime();\n              _context.next = 5;\n              return db.collection(\"lessons\").doc(router.query.lessonid).collection(\"message\").add({\n                userid: email,\n                text: message,\n                time: firebase.firestore.FieldValue.serverTimestamp()\n              }).then(function () {\n                setMessage(\"\");\n              });\n\n            case 5:\n              userfilter = \"\";\n\n              if (email == createrid || email == buyerid) {\n                setUserfilter(true);\n              } else {}\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function doSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }(); //\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: doChangeMessage,\n      value: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: doSubmit,\n      children: \"\\u9001\\u4FE1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MessageAdd, \"Ca4ecmfO/3/ZdFG8+4G1g8EpnVg=\", false, function () {\n  return [useRouter];\n});\n\n_c = MessageAdd;\nMessageAdd = connect(function (state) {\n  return state;\n})(MessageAdd);\nexport default MessageAdd;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageAdd\");","map":{"version":3,"sources":["C:/Users/programing_practice/suberobeta_app/components/MessageAdd.js"],"names":["React","useState","connect","firebase","useRouter","Lib","MessageAdd","props","message","setMessage","userfilter","setUserfilter","doChangeMessage","e","target","value","router","doSubmit","db","firestore","email","encodeEmail","d","Date","getTime","collection","doc","query","lessonid","add","userid","text","time","FieldValue","serverTimestamp","then","createrid","buyerid","state"],"mappings":";;;;;;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAAQC,SAAR,QAAuB,aAAvB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAAA;;AAGxB;AAHwB,kBAIKN,QAAQ,CAAC,EAAD,CAJb;AAAA,MAIjBO,OAJiB;AAAA,MAITC,UAJS;;AAAA,mBAKWR,QAAQ,CAAC,EAAD,CALnB;AAAA,MAKjBS,UALiB;AAAA,MAKNC,aALM,kBAOxB;;;AACA,MAAMC,eAAe,GAAE,SAAjBA,eAAiB,CAACC,CAAD,EAAK;AAC1BJ,IAAAA,UAAU,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACD,GAFD;;AAIA,MAAMC,MAAM,GAAGZ,SAAS,EAAxB,CAZwB,CAcxB;AACA;AACA;;AACA,MAAMa,QAAQ;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,cAAAA,EADS,GACJf,QAAQ,CAACgB,SAAT,EADI;AAETC,cAAAA,KAFS,GAEDf,GAAG,CAACgB,WAAJ,CAAgBd,KAAK,CAACa,KAAtB,CAFC;AAGXE,cAAAA,CAHW,GAGP,IAAIC,IAAJ,GAAWC,OAAX,EAHO;AAAA;AAAA,qBAITN,EAAE,CAACO,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6BV,MAAM,CAACW,KAAP,CAAaC,QAA1C,EAAoDH,UAApD,CAA+D,SAA/D,EAA0EI,GAA1E,CAA8E;AAClFC,gBAAAA,MAAM,EAAEV,KAD0E;AAElFW,gBAAAA,IAAI,EAAEvB,OAF4E;AAGlFwB,gBAAAA,IAAI,EAAE7B,QAAQ,CAACgB,SAAT,CAAmBc,UAAnB,CAA8BC,eAA9B;AAH4E,eAA9E,EAIDC,IAJC,CAII,YAAU;AAChB1B,gBAAAA,UAAU,CAAC,EAAD,CAAV;AACD,eANG,CAJS;;AAAA;AAWTC,cAAAA,UAXS,GAWE,EAXF;;AAYb,kBAAIU,KAAK,IAAEgB,SAAP,IAAoBhB,KAAK,IAAEiB,OAA/B,EAAuC;AACrC1B,gBAAAA,aAAa,CAAC,IAAD,CAAb;AACH,eAFC,MAGE,CAEH;;AAjBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARM,QAAQ;AAAA;AAAA;AAAA,KAAd,CAjBwB,CAoCxB;;;AAGF,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAEL,eAA7B;AAA8C,MAAA,KAAK,EAAEJ;AAArD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAES,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKG;;GA5CMX,U;UAYQF,S;;;KAZRE,U;AA8CTA,UAAU,GAAEJ,OAAO,CAAC,UAACoC,KAAD;AAAA,SAASA,KAAT;AAAA,CAAD,CAAP,CAAwBhC,UAAxB,CAAZ;AACA,eAAeA,UAAf","sourcesContent":["//メッセージ送信フォーム\r\n//message/[lessonid]でインポート\r\n\r\nimport React , {useState} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"firebase\";\r\nimport {useRouter}from \"next/router\";\r\nimport Lib from \"../static/address_lib\";\r\n\r\nfunction MessageAdd(props){\r\n\r\n\r\n  //使用するステートの設定(Hook)\r\n  const [message,setMessage] = useState(\"\");\r\n  const [userfilter,setUserfilter] = useState(\"\");\r\n\r\n  //inputに入力された処理をeで受け取ってステートに入れる関数\r\n  const doChangeMessage =(e)=>{\r\n    setMessage(e.target.value);\r\n  }\r\n\r\n  const router = useRouter();\r\n\r\n  //追加ボタンを押したらfirebaseにステートの情報を書き込む処理\r\n  //addで追加しているから、ドキュメントidはユニークなidが自動で当てられる\r\n  //Reduxからユーザーのemail(id)をencode( .→* )にして定数に代入\r\n  const doSubmit = async()=>{\r\n    const db = firebase.firestore ();\r\n    const email = Lib.encodeEmail(props.email);\r\n    let d = new Date().getTime();\r\n    await db.collection(\"lessons\").doc(router.query.lessonid).collection(\"message\").add({\r\n      userid: email,\r\n      text: message,\r\n      time: firebase.firestore.FieldValue.serverTimestamp(),\r\n      }).then(function(){\r\n        setMessage(\"\");\r\n      })\r\n      let userfilter=\"\";\r\n      if (email==createrid || email==buyerid){\r\n        setUserfilter(true);\r\n    }\r\n    else{\r\n          \r\n    }\r\n  }\r\n  //\r\n                \r\n\r\nreturn(\r\n  <div>\r\n    <input type=\"text\" onChange={doChangeMessage} value={message}></input>\r\n    <button onClick={doSubmit}>送信</button>\r\n  </div>\r\n);}\r\n\r\nMessageAdd =connect((state)=>state)(MessageAdd);\r\nexport default MessageAdd;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}