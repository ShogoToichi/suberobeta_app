{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\programing_practice\\\\suberobeta_app\\\\components\\\\Account.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"firebase\";\nimport Button from '@material-ui/core/Button';\n\nclass Account extends Component {\n  constructor(props) {\n    super(props); // 属性値として使うためにバインド\n\n    _defineProperty(this, \"style\", {\n      fontSize: \"12pt\",\n      padding: \"5px 10px\"\n    });\n\n    this.login_check = this.login_check.bind(this);\n  } //ログイン処理\n\n\n  login() {\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n    let provider = new firebase.auth.GoogleAuthProvider();\n    var self = this;\n    firebase.auth().signInWithPopup(provider) //ログイン処理完了後resultで値を受け取りReduxへ\n    .then(result => {\n      this.props.dispatch({\n        type: \"UPDATE_USER\",\n        value: {\n          login: true,\n          username: result.user.displayName,\n          email: result.user.email,\n          imageurl: \"\"\n        }\n      }); //ログイン時の処理をpropsで受け取れるようにする\n      //とりま使ってない\n      // this.props.onLogined();\n    });\n  } //ログアウト機能\n\n\n  logout() {\n    console.log(\"logout\");\n    firebase.auth().signOut();\n    this.props.dispatch({\n      type: \"UPDATE_USER\",\n      value: {\n        login: false,\n        username: \"(click here!)\",\n        email: \"\",\n        data: [],\n        imageurl: \"\"\n      }\n    }); // this.props.onLogouted();\n  } //ログイン、ログアウト処理をクリック時に分岐する関数\n\n\n  login_check() {\n    if (this.props.login === false) {\n      this.login();\n    } else {\n      this.logout();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      size: \"large\",\n      color: \"inherit\",\n      onClick: this.login_check,\n      children: \"\\u30ED\\u30B0\\u30A4\\u30F3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAccount = connect(state => state)(Account);\nexport default Account;","map":{"version":3,"sources":["C:/Users/programing_practice/suberobeta_app/components/Account.js"],"names":["React","Component","connect","firebase","Button","Account","constructor","props","fontSize","padding","login_check","bind","login","auth","setPersistence","Auth","Persistence","LOCAL","provider","GoogleAuthProvider","self","signInWithPopup","then","result","dispatch","type","value","username","user","displayName","email","imageurl","logout","console","log","signOut","data","render","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAMA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAQ9BK,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN,EADgB,CAEhB;;AAFgB,mCALV;AACNC,MAAAA,QAAQ,EAAC,MADH;AAENC,MAAAA,OAAO,EAAC;AAFF,KAKU;;AAGhB,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD,GAZ6B,CAc9B;;;AACAC,EAAAA,KAAK,GAAE;AACLT,IAAAA,QAAQ,CAACU,IAAT,GAAgBC,cAAhB,CAA+BX,QAAQ,CAACU,IAAT,CAAcE,IAAd,CAAmBC,WAAnB,CAA+BC,KAA9D;AACA,QAAIC,QAAQ,GAAG,IAAIf,QAAQ,CAACU,IAAT,CAAcM,kBAAlB,EAAf;AACA,QAAIC,IAAI,GAAG,IAAX;AACAjB,IAAAA,QAAQ,CAACU,IAAT,GAAgBQ,eAAhB,CAAgCH,QAAhC,EACA;AADA,KAEGI,IAFH,CAESC,MAAD,IAAU;AACd,WAAKhB,KAAL,CAAWiB,QAAX,CAAoB;AAClBC,QAAAA,IAAI,EAAC,aADa;AAElBC,QAAAA,KAAK,EAAC;AACJd,UAAAA,KAAK,EAAC,IADF;AAEJe,UAAAA,QAAQ,EAAEJ,MAAM,CAACK,IAAP,CAAYC,WAFlB;AAGJC,UAAAA,KAAK,EAAEP,MAAM,CAACK,IAAP,CAAYE,KAHf;AAIJC,UAAAA,QAAQ,EAAG;AAJP;AAFY,OAApB,EADc,CAUd;AACA;AACA;AACD,KAfH;AAgBD,GAnC6B,CAqC9B;;;AACAC,EAAAA,MAAM,GAAE;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA/B,IAAAA,QAAQ,CAACU,IAAT,GAAgBsB,OAAhB;AACA,SAAK5B,KAAL,CAAWiB,QAAX,CAAoB;AAClBC,MAAAA,IAAI,EAAC,aADa;AAElBC,MAAAA,KAAK,EAAC;AACJd,QAAAA,KAAK,EAAC,KADF;AAEJe,QAAAA,QAAQ,EAAC,eAFL;AAGJG,QAAAA,KAAK,EAAC,EAHF;AAIJM,QAAAA,IAAI,EAAC,EAJD;AAKJL,QAAAA,QAAQ,EAAC;AALL;AAFY,KAApB,EAHM,CAaN;AACD,GApD6B,CAsD9B;;;AACArB,EAAAA,WAAW,GAAE;AACX,QAAI,KAAKH,KAAL,CAAWK,KAAX,KAAoB,KAAxB,EAA8B;AAC5B,WAAKA,KAAL;AACD,KAFD,MAEM;AACJ,WAAKoB,MAAL;AACD;AACF;;AAEDK,EAAAA,MAAM,GAAE;AACN,wBAEE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,UAAhB;AAA2B,MAAA,IAAI,EAAC,OAAhC;AAAwC,MAAA,KAAK,EAAC,SAA9C;AACA,MAAA,OAAO,EAAE,KAAK3B,WADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAKD;;AArE6B;;AAwEhCL,OAAO,GAAGH,OAAO,CAAEoC,KAAD,IAAUA,KAAX,CAAP,CAAyBjC,OAAzB,CAAV;AACA,eAAeA,OAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"firebase\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\n\r\n\r\nclass Account extends Component {\r\n\r\n  \r\n  style = {\r\n    fontSize:\"12pt\",\r\n    padding:\"5px 10px\"\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    // 属性値として使うためにバインド\r\n    this.login_check = this.login_check.bind(this);\r\n  }\r\n\r\n  //ログイン処理\r\n  login(){\r\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n    let provider = new firebase.auth.GoogleAuthProvider();\r\n    var self = this;\r\n    firebase.auth().signInWithPopup(provider)\r\n    //ログイン処理完了後resultで値を受け取りReduxへ\r\n      .then((result)=>{\r\n        this.props.dispatch({\r\n          type:\"UPDATE_USER\",\r\n          value:{\r\n            login:true,\r\n            username: result.user.displayName,\r\n            email: result.user.email,\r\n            imageurl : \"\",\r\n          }\r\n        });\r\n        //ログイン時の処理をpropsで受け取れるようにする\r\n        //とりま使ってない\r\n        // this.props.onLogined();\r\n      });\r\n  }\r\n\r\n  //ログアウト機能\r\n  logout(){\r\n    console.log(\"logout\");\r\n    firebase.auth().signOut();\r\n    this.props.dispatch({\r\n      type:\"UPDATE_USER\",\r\n      value:{\r\n        login:false,\r\n        username:\"(click here!)\",\r\n        email:\"\",\r\n        data:[],\r\n        imageurl:\"\"\r\n      }\r\n    });\r\n    // this.props.onLogouted();\r\n  }\r\n\r\n  //ログイン、ログアウト処理をクリック時に分岐する関数\r\n  login_check(){\r\n    if (this.props.login ===false){\r\n      this.login();\r\n    }else {\r\n      this.logout();\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      \r\n      <Button variant=\"outlined\" size=\"large\" color=\"inherit\" \r\n      onClick={this.login_check}>ログイン</Button>\r\n    );\r\n  }\r\n}\r\n\r\nAccount = connect((state)=> state)(Account);\r\nexport default Account;"]},"metadata":{},"sourceType":"module"}