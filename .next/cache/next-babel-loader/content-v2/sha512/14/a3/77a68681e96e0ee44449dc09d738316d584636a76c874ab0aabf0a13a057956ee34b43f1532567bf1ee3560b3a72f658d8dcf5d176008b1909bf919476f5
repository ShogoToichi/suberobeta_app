{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"C:/Users/t.osato/Documents/subero/suberobeta_app-1/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/t.osato/Documents/subero/suberobeta_app-1/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useState } from \"react\";\nimport firebase from \"firebase\";\nimport \"firebase/storage\";\nimport { connect } from \"react-redux\";\nimport Lib from \"../../Lib/address_lib\";\nimport Link from \"next/link\";\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Title from \"../normal_parts/Title\";\nimport InputForm from \"./parts/InputForm\";\n\nfunction LessonAdd(props) {\n  //使用するステートの設定(Hook)\n  var _useState = useState(\"\"),\n      lessonname = _useState[0],\n      setLessonname = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      place = _useState2[0],\n      setPlace = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      time = _useState3[0],\n      setTime = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      price = _useState4[0],\n      setPrice = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      lessoncomment = _useState5[0],\n      setLessoncomment = _useState5[1]; //inputに入力された処理をeで受け取ってステートに入れる関数\n\n\n  var doChangeName = function doChangeName(e) {\n    setLessonname(e.target.value);\n  };\n\n  var doChangePlace = function doChangePlace(e) {\n    setPlace(e.target.value);\n  };\n\n  var doChangeTime = function doChangeTime(e) {\n    setTime(e.target.value);\n  };\n\n  var doChangePrice = function doChangePrice(e) {\n    setPrice(e.target.value);\n  };\n\n  var doChangeComment = function doChangeComment(e) {\n    setLessoncomment(e.target.value);\n  }; //追加ボタンを押したらfirebaseにステートの情報を書き込む処理\n  //addで追加しているから、ドキュメントidはユニークなidが自動で当てられる\n  //Reduxからユーザーのemail(id)をencode( .→* )にして定数に代入\n\n\n  var doSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var db, email;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              db = firebase.firestore();\n              email = Lib.encodeEmail(props.email);\n              _context.next = 4;\n              return db.collection(\"lessons\").add({\n                createrid: email,\n                lessonname: lessonname,\n                lessonplace: place,\n                lessonprice: price,\n                lessontext: lessoncomment,\n                lessontime: time\n              }).then(function (doc) {\n                console.log(\"LessonID:\", doc.id);\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function doSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(Title, {\n      title: \"新規レッスンの追加\",\n      subtitle: \"自分の能力を生かして、ウィンタースポーツの輪を広げましょう。\"\n    }), /*#__PURE__*/_jsx(InputForm, {\n      doChangeName: doChangeName,\n      doChangeTime: doChangeTime,\n      doChangePlace: doChangePlace,\n      doChangePrice: doChangePrice,\n      doChangeComment: doChangeComment,\n      doSubmit: doSubmit\n    })]\n  });\n}\n\nLessonAdd = connect(function (state) {\n  return state;\n})(LessonAdd);\nexport default LessonAdd; //       <div className={classes.top}>\n//           <div className={classes.title}>\n//           <Typography variant=\"h5\">新規レッスンの追加</Typography>\n//           </div>\n//           <Typography variant=\"h8\">自分の能力を生かして、ウィンタースポーツの輪を広げましょう。</Typography>\n//           <div className = {classes.inputform}>\n//               <Typography className={classes.inputtitle} variant=\"h8\">レッスンに関する情報を入力してください。</Typography>\n//               <br></br>\n//               <form className={classes.textarea} noValidate autoComplete=\"off\"></form>\n//                       <TextField\n//                   id=\"standard-textarea\"\n//                   label=\"レッスン名\"\n//                   placeholder=\"\"\n//                   multiline\n//                   fullWidth\n//                   />\n//               <form className={classes.textarea} noValidate autoComplete=\"off\"></form>\n//                       <TextField\n//                   id=\"standard-textarea\"\n//                   label=\"日時\"\n//                   placeholder=\"〇月〇日午前〇時～〇月〇日午前〇時\"\n//                   multiline\n//                   fullWidth\n//                   />\n//               <form className={classes.textarea} noValidate autoComplete=\"off\"></form>\n//                       <TextField\n//                   id=\"standard-textarea\"\n//                   label=\"場所\"\n//                   placeholder=\"〇〇スキー場\"\n//                   multiline\n//                   fullWidth\n//                   />\n//               <form className={classes.textarea} noValidate autoComplete=\"off\"></form>\n//                       <TextField\n//                   id=\"standard-textarea\"\n//                   label=\"料金\"\n//                   placeholder=\"￥〇〇〇〇円\"\n//                   multiline\n//                   fullWidth\n//                   />\n//               <div className={classes.detailinfo}>\n//               <form className={classes.textarea} noValidate autoComplete=\"off\"></form>\n//                       <TextField\n//                   id=\"outlined-multiline-static\"\n//                   label=\"レッスン内容\"\n//                   placeholder=\"\"\n//                   multiline\n//                   rows={8}\n//                   variant=\"outlined\"\n//                   fullWidth\n//                   />\n//               </div>\n//           </div>\n//           <Link href=\"/mypage\">\n//           <Button style={{marginTop:\"10px\"}} variant=\"outlined\" size=\"large\"color=\"ingerit\" >追 加</Button>\n//           </Link>\n//       </div>\n// <div>\n//   <h2>レッスン追加</h2>\n//   <p>レッスン名</p>\n//   <input type=\"text\" onChange={doChangeName}></input>\n//   <p>場所</p>\n//   <input type=\"text\" onChange={doChangePlace}></input>\n//   <p>所要時間</p>\n//   <input type=\"text\" onChange={doChangeTime}></input>\n//   <p>料金</p>\n//   <input type=\"text\" onChange={doChangePrice}></input>\n//   <p>レッスン詳細</p>\n//   <input type=\"text\" onChange={doChangeComment}></input>\n//   {/* 要確認 : ページ移動処理がfirebase書き込む処理より先に実行されるのが大丈夫なのか */}\n//   {/* next.jsのRouterメソッドを使って、dosubmit内でページ移動したかったがエラーが出たのでとりあえずLinkを使ってある */}\n//   <Link href=\"/mypage\">\n//   <button onClick={doSubmit}>追加</button>\n//   </Link>\n// </div>","map":null,"metadata":{},"sourceType":"module"}