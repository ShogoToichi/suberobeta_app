{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\programing_practice\\\\suberobeta_app\\\\components\\\\MessageAdd.js\";\n//メッセージ送信フォーム\n//message/[lessonid]でインポート\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"firebase\";\nimport { useRouter } from \"next/router\";\nimport Lib from \"../static/address_lib\";\n\nfunction MessageAdd(props) {\n  //使用するステートの設定(Hook)\n  const {\n    0: message,\n    1: setMessage\n  } = useState(\"\"); //inputに入力された処理をeで受け取ってステートに入れる関数\n\n  const doChangeMessage = e => {\n    setMessage(e.target.value);\n  };\n\n  const router = useRouter(); //追加ボタンを押したらfirebaseにステートの情報を書き込む処理\n  //addで追加しているから、ドキュメントidはユニークなidが自動で当てられる\n  //Reduxからユーザーのemail(id)をencode( .→* )にして定数に代入\n\n  const doSubmit = async () => {\n    const db = firebase.firestore();\n    const email = Lib.encodeEmail(props.email);\n    let d = new Date().getTime();\n    await db.collection(\"lessons\").doc(router.query.lessonid).collection(\"message\").add({\n      userid: email,\n      text: message,\n      time: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      d;\n      setMessage(\"\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: doChangeMessage,\n      value: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: doSubmit,\n      children: \"\\u9001\\u4FE1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this);\n}\n\nMessageAdd = connect(state => state)(MessageAdd);\nexport default MessageAdd;","map":{"version":3,"sources":["C:/Users/programing_practice/suberobeta_app/components/MessageAdd.js"],"names":["React","useState","connect","firebase","useRouter","Lib","MessageAdd","props","message","setMessage","doChangeMessage","e","target","value","router","doSubmit","db","firestore","email","encodeEmail","d","Date","getTime","collection","doc","query","lessonid","add","userid","text","time","FieldValue","serverTimestamp","then","state"],"mappings":";;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAAQC,SAAR,QAAuB,aAAvB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAGxB;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAASC;AAAT,MAAuBR,QAAQ,CAAC,EAAD,CAArC,CAJwB,CAMxB;;AACA,QAAMS,eAAe,GAAGC,CAAD,IAAK;AAC1BF,IAAAA,UAAU,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACD,GAFD;;AAIA,QAAMC,MAAM,GAAGV,SAAS,EAAxB,CAXwB,CAaxB;AACA;AACA;;AACA,QAAMW,QAAQ,GAAG,YAAS;AACxB,UAAMC,EAAE,GAAGb,QAAQ,CAACc,SAAT,EAAX;AACA,UAAMC,KAAK,GAAGb,GAAG,CAACc,WAAJ,CAAgBZ,KAAK,CAACW,KAAtB,CAAd;AACA,QAAIE,CAAC,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAR;AACA,UAAMN,EAAE,CAACO,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6BV,MAAM,CAACW,KAAP,CAAaC,QAA1C,EAAoDH,UAApD,CAA+D,SAA/D,EAA0EI,GAA1E,CAA8E;AAChFC,MAAAA,MAAM,EAAEV,KADwE;AAEhFW,MAAAA,IAAI,EAAErB,OAF0E;AAGhFsB,MAAAA,IAAI,EAAE3B,QAAQ,CAACc,SAAT,CAAmBc,UAAnB,CAA8BC,eAA9B;AAH0E,KAA9E,EAIDC,IAJC,CAII,YAAU;AAChBb,MAAAA,CAAC;AACDX,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD,KAPG,CAAN;AAQD,GAZD;;AAcF,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAEC,eAA7B;AAA8C,MAAA,KAAK,EAAEF;AAArD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEO,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKG;;AAEHT,UAAU,GAAEJ,OAAO,CAAEgC,KAAD,IAASA,KAAV,CAAP,CAAwB5B,UAAxB,CAAZ;AACA,eAAeA,UAAf","sourcesContent":["//メッセージ送信フォーム\r\n//message/[lessonid]でインポート\r\n\r\nimport React , {useState} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"firebase\";\r\nimport {useRouter}from \"next/router\";\r\nimport Lib from \"../static/address_lib\";\r\n\r\nfunction MessageAdd(props){\r\n\r\n\r\n  //使用するステートの設定(Hook)\r\n  const [message,setMessage] = useState(\"\");\r\n\r\n  //inputに入力された処理をeで受け取ってステートに入れる関数\r\n  const doChangeMessage =(e)=>{\r\n    setMessage(e.target.value);\r\n  }\r\n\r\n  const router = useRouter();\r\n\r\n  //追加ボタンを押したらfirebaseにステートの情報を書き込む処理\r\n  //addで追加しているから、ドキュメントidはユニークなidが自動で当てられる\r\n  //Reduxからユーザーのemail(id)をencode( .→* )にして定数に代入\r\n  const doSubmit = async()=>{\r\n    const db = firebase.firestore ();\r\n    const email = Lib.encodeEmail(props.email);\r\n    let d = new Date().getTime();\r\n    await db.collection(\"lessons\").doc(router.query.lessonid).collection(\"message\").add({\r\n        userid: email,\r\n        text: message,\r\n        time: firebase.firestore.FieldValue.serverTimestamp(),\r\n      }).then(function(){\r\n        d\r\n        setMessage(\"\");\r\n      })\r\n  }\r\n\r\nreturn(\r\n  <div>\r\n    <input type=\"text\" onChange={doChangeMessage} value={message}></input>\r\n    <button onClick={doSubmit}>送信</button>\r\n  </div>\r\n);}\r\n\r\nMessageAdd =connect((state)=>state)(MessageAdd);\r\nexport default MessageAdd;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}