{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/programing_practice/suberobeta_app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"C:/Users/programing_practice/suberobeta_app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\programing_practice\\\\suberobeta_app\\\\components\\\\Message.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport firebase from \"firebase\";\nimport { useRouter } from \"next/router\";\nimport Lib from \"../static/address_lib\";\nimport { connect } from \"react-redux\";\nimport \"firebase/storage\";\n\nfunction Message(props) {\n  _s();\n\n  var _this = this;\n\n  //ステート定義\n  var _useState = useState(\"\"),\n      createrid = _useState[0],\n      setCreaterid = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      buyerid = _useState3[0],\n      setBuyerid = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      lessonname = _useState4[0],\n      setLessonname = _useState4[1]; //送信者によってスタイルを変更するテスト用のスタイル\n\n\n  var style2 = {\n    backgroundColor: \"blue\"\n  };\n  var style1 = {\n    backgroundColor: \"red\"\n  };\n  var messagedata = [];\n  var messageitems = [];\n  var router = useRouter(); //lessondata及びmessageを取得\n\n  var getMessageData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var email, db;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              email = Lib.encodeEmail(props.email);\n              db = firebase.firestore(); //router.query.lessonidでページのurlの末尾を取得\n              //先にレッスン名と作成者、購入者のidを取得\n\n              _context.next = 4;\n              return db.collection(\"lessons\").doc(router.query.lessonid).get() //取得したデータをlessondataにしまってから、それをステートに突っ込む\n              .then(function (doc) {\n                var lessondata = doc.data();\n                setCreaterid(lessondata.createrid);\n                setLessonname(lessondata.lessonname);\n                setBuyerid(lessondata.buyerid); //メッセージ情報取得処理\n                //orderBy(time)で時間の古い順に並べる\n\n                db.collection(\"lessons\").doc(router.query.lessonid).collection(\"message\").orderBy(\"time\").get() //取得したデータをmessagedata配列に入れる。\n                //配列の繰り返し処理で\n                .then(function (querySnapshot) {\n                  querySnapshot.forEach(function (doc) {\n                    messagedata.push(doc.data());\n                  });\n\n                  for (var i in messagedata) {\n                    var text = messagedata[i].text;\n                    var userid = messagedata[i].userid;\n\n                    if (userid == email) {\n                      messageitems.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                        style: style1,\n                        children: text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 55,\n                        columnNumber: 19\n                      }, this));\n                    } else {\n                      messageitems.push( /*#__PURE__*/_jsxDEV(\"p\", {\n                        style: style2,\n                        children: text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 59,\n                        columnNumber: 19\n                      }, this));\n                    }\n                  }\n\n                  setMessages(messageitems);\n                });\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getMessageData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var userfilter = function userfilter() {\n    if (email == createrid || email == buyerid) {\n      return messages;\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u306F\\u3054\\u5229\\u7528\\u3044\\u305F\\u3060\\u3051\\u307E\\u305B\\u3093\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 14\n      }, _this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getMessageData,\n      children: \"\\u8AAD\\u307F\\u8FBC\\u307F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: lessonname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }, this), messages]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Message, \"f3O60XEJqkHCjhKUgQjRypr6XY8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Message;\nMessage = connect(function (state) {\n  return state;\n})(Message);\nexport default Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["C:/Users/programing_practice/suberobeta_app/components/Message.js"],"names":["React","useState","firebase","useRouter","Lib","connect","Message","props","createrid","setCreaterid","messages","setMessages","buyerid","setBuyerid","lessonname","setLessonname","style2","backgroundColor","style1","messagedata","messageitems","router","getMessageData","email","encodeEmail","db","firestore","collection","doc","query","lessonid","get","then","lessondata","data","orderBy","querySnapshot","forEach","push","i","text","userid","userfilter","state"],"mappings":"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","sourcesContent":["import React,{useState} from \"react\";\r\nimport firebase from \"firebase\";\r\nimport {useRouter}from \"next/router\";\r\nimport Lib from \"../static/address_lib\"\r\nimport { connect } from \"react-redux\";\r\nimport \"firebase/storage\";\r\n\r\nfunction Message (props){\r\n  //ステート定義\r\n  const [createrid,setCreaterid]= useState(\"\");\r\n  const [messages,setMessages] = useState(\"\");\r\n  const [buyerid,setBuyerid]= useState(\"\");\r\n  const [lessonname,setLessonname] = useState(\"\");\r\n  \r\n  //送信者によってスタイルを変更するテスト用のスタイル\r\n  const style2 = {\r\n    backgroundColor :\"blue\",\r\n  }\r\n  const style1 = {\r\n    backgroundColor :\"red\",\r\n  }\r\n  const messagedata=[];\r\n  const messageitems=[];\r\n\r\n  const router = useRouter();\r\n  //lessondata及びmessageを取得\r\n  const getMessageData= async()=>{\r\n    const email = Lib.encodeEmail(props.email);\r\n    const db = firebase.firestore ();\r\n    //router.query.lessonidでページのurlの末尾を取得\r\n    //先にレッスン名と作成者、購入者のidを取得\r\n    await db.collection(\"lessons\").doc(router.query.lessonid).get()\r\n    //取得したデータをlessondataにしまってから、それをステートに突っ込む\r\n    .then(function(doc){\r\n      const lessondata = doc.data();\r\n        setCreaterid(lessondata.createrid);\r\n        setLessonname(lessondata.lessonname);\r\n        setBuyerid(lessondata.buyerid);\r\n\r\n        //メッセージ情報取得処理\r\n        //orderBy(time)で時間の古い順に並べる\r\n        db.collection(\"lessons\").doc(router.query.lessonid).collection(\"message\").orderBy(\"time\")\r\n        .get()\r\n        //取得したデータをmessagedata配列に入れる。\r\n        //配列の繰り返し処理で\r\n          .then(function(querySnapshot){\r\n            querySnapshot.forEach(function(doc){\r\n              messagedata.push(doc.data());\r\n            });\r\n          for(let i in messagedata){\r\n            let text = messagedata[i].text;\r\n            let userid = messagedata[i].userid;\r\n            if(userid == email){\r\n              messageitems.push(\r\n                  <p style={style1}>{text}</p>\r\n              );}\r\n            else {\r\n              messageitems.push(\r\n                  <p style={style2}>{text}</p>\r\n              );\r\n            }\r\n          }\r\n          setMessages(messageitems);\r\n          })\r\n  })}\r\n  const userfilter =()=>{\r\n    if (email==createrid || email==buyerid){\r\n      return messages;\r\n    }\r\n    else{\r\n      return <p>メッセージはご利用いただけません</p>\r\n    }\r\n  }\r\nreturn(\r\n  <div>\r\n    <button onClick={getMessageData}>読み込み</button>\r\n    <h2>{lessonname}</h2>\r\n    {messages}\r\n  </div>\r\n)\r\n}\r\n\r\n\r\nMessage = connect((state)=>state)(Message);\r\nexport default Message;"]},"metadata":{},"sourceType":"module"}